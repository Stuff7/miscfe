@use "sass:map";
@use "sass:list";
@use "sass:math";

$fonts-folder: "/assets/fonts" !default;

$weight-name-map: (
  100: "Thin",
  200: "ExtraLight",
  300: "Light",
  400: "Regular",
  500: "Medium",
  600: "SemiBold",
  700: "Bold",
  800: "ExtraBold",
  900: "Black",
);

@mixin font-rules(
  $font-name,
  $font-weight: 400,
  $font-variant: "Regular",
  $font-type: "ttf",
  $font-family: $font-name,
) {
  font-family: $font-family;
  src: url(
    $fonts-folder + "/" + $font-name + "/" + $font-name + "-" +
    $font-variant + "." + $font-type
  );
  font-weight: $font-weight;
}

@mixin load-font($font-name, $font-type: "ttf", $blacklist: (), $font-family: $font-name) {
  @each $font-weight, $font-variant in $weight-name-map {
    @if list.index($blacklist, $font-weight) == null {
      @font-face {
        @include font-rules($font-name, $font-weight, $font-variant, $font-type, $font-family);
      }
      @font-face {
        @include font-rules($font-name, $font-weight, $font-variant + "Italic", $font-type, $font-family);
        font-style: italic;
      }
    }
  }
}

@mixin load-single-style-font(
  $font-name,
  $font-weight: 400,
  $font-variant: "Regular",
  $font-type: "ttf",
  $font-family: $font-name,
) {
  @font-face {
    @include font-rules($font-name, $font-weight, $font-variant, $font-type, $font-family);
  }
}

@function unitless($name, $value, $unit) {
  @if math.is-unitless($value) {
    @return $value + $unit;
  }
  @error "#{$unit} function only takes unitless types";
}

@function rem($px) {
  @return unitless(rem, math.div($px, 16), rem);
}

@function em($px) {
  @return unitless(em, math.div($px, 16), em);
}
